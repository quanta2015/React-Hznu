import React from 'react'import dayjs from 'dayjs'import { inject } from 'mobx-react'import { Carousel,Spin,Input,Checkbox, Icon, Form,message,Button,Table } from 'antd'import { API_SERVER } from 'constant/apis'import moment from 'moment'import style from './style.less';import * as urls from 'constant/urls'import {isN,msg} from 'util/fn'const opt = ['综合分析','机组编辑','实时监测','用户管理']const _item = {id:-1, usr:'', name:'', pwd:'', role: ''}const encodeRole=(list)=>{  let ret = [0,0,0,0]  list.map((item,i)=>{    opt.map((o,j)=>{      if (item===o) {        ret[j] = 1      }    })  })  return ret.join('|')}const decodeRole=(s)=>{  let ret = []  if (isN(s)) {    return []  }    s.split('|').map((item,i)=>{    if (parseInt(item)===1) {      ret.push(opt[i])    }  })  return ret}@inject('mainStore')class Conf extends React.Component {  constructor(props) {    super(props)    this.store = this.props.mainStore    this.state = {      loading: false,      user: [],      show: false,      item: _item,    }  }  async componentDidMount() {    if (isN(this.store.currUser)) {      this.props.history.push("/login")    }else{      this.setState({ loading: true })      let r = await this.props.mainStore.post(urls.API_USER_LIST)      // console.log(r)      this.setState({ loading: false, user:r.data })    }      }  doShowForm=(e)=>{    this.setState({show:true, item:e})  }  doDelItem=async(id)=>{    let params = {id:id}    this.setState({ loading: true })    let r = await this.props.mainStore.post(urls.API_USER_DEL,params)    this.setState({ loading: false, user:r.data })    msg('删除用户数据成功')  }  doCheckVaild = () => {    this.props.form.validateFields(async (err, values) => {      if (err) { return }      await this.doSave(values)    })  }  doSave=async(u)=>{    u.role = encodeRole(u.role)    this.setState({ loading: true })    let r = await this.store.post(urls.API_USER_SAVE, u)    this.setState({ loading: false, user: r.data, show:false })    msg('保存用户数据成功')  }  doClose=()=>{    this.setState({show:false})  }  render() {    let {user,show,item} = this.state    const {getFieldDecorator} = this.props.form    item.roleList = decodeRole(item.role)    // console.log(item.roleList)    return (      <Spin spinning={this.state.loading}>        <div className="g-conf">          <div className="m-conf">            <div className="m-fun">              <div className="m-btn c-orange" onClick={this.doShowForm.bind(this,_item)}>                <Icon type="plus"/>添加用户              </div>            </div>                        <div className="m-list">              <div className="m-row">                <span>序号</span>                <span>账号</span>                <span>用户名</span>                <span>密码</span>                <span>综合分析</span>                <span>机组编辑</span>                <span>实时监测</span>                <span>用户管理</span>                <span></span>              </div>              {user.map((item,i)=>                <div className="m-row" key={i}>                  <span>{item.id}</span>                  <span>{item.usr}</span>                  <span>{item.name}</span>                  <span>{item.pwd}</span>                  <span>{(item.sys)?<Icon type="check"  className="fc-green" />:<Icon type="close"  className="fc-red" />}</span>                  <span>{(item.edit)?<Icon type="check" className="fc-green" />:<Icon type="close"  className="fc-red" />}</span>                  <span>{(item.run)?<Icon type="check"  className="fc-green" />:<Icon type="close"  className="fc-red" />}</span>                  <span>{(item.conf)?<Icon type="check" className="fc-green" />:<Icon type="close"  className="fc-red" />}</span>                  <span>                    <div className="m-btn c-green" onClick={this.doShowForm.bind(this,item)}>                      <Icon type="edit" />编 辑                    </div>                    <div className="m-btn c-green" onClick={this.doDelItem.bind(this,item.id)}>                      <Icon type="delete" />删 除                    </div>                  </span>                </div>              )}            </div>          </div>          {(show)&&          <div className="m-form">            <div className="m-wrap">              <Form layout="horizontal"  >                <Form.Item className="fn-hide">                  {getFieldDecorator('id', {                    rules: [{required: true}],                    initialValue: item.id                  })(                    <Input/>)}                </Form.Item>                <Form.Item label="账号">                  {getFieldDecorator('usr', {                    rules: [{required: true, message: ' 请输入账号!'}],                    initialValue: item.usr                  })(                    <Input                      icon="search"                      size='large'                      placeholder="请输入账号"                      allowClear                      prefix={<Icon type="user" style={{color: 'rgba(0,0,0,.25)'}}/>}                    />)}                </Form.Item>                <Form.Item label="密码">                  {getFieldDecorator('pwd', {                    rules: [{required: true, message: '请输入密码！'}],                    initialValue: item.pwd                  })(                    <Input.Password                      size='large'                      placeholder="请输入密码"                      prefix={<Icon type="lock" style={{color: 'rgba(0,0,0,.25)'}}/>}                    />)}                </Form.Item>                <Form.Item label="用户名称">                  {getFieldDecorator('name', {                    rules: [{required: true, message: ' 请输入用户名称!'}],                    initialValue: item.name                  })(                    <Input                      icon="search"                      size='large'                      placeholder="请输入用户名称"                      allowClear                      prefix={<Icon type="user" style={{color: 'rgba(0,0,0,.25)'}}/>}                    />)}                </Form.Item>                <Form.Item  label="访问权限">                  {getFieldDecorator('role', {                    rules: [{required: true, message: ' 请选择用户权限!'}],                    initialValue: item.roleList                  })(                    <Checkbox.Group options={opt} />)}                </Form.Item>                <Form.Item className="m-fun">                  <Button type="primary" className="input-btn" onClick={this.doCheckVaild} block >保存</Button>                  <Button type="cancel" className="input-btn" onClick={this.doClose} block >关闭</Button>                </Form.Item>              </Form>            </div>          </div>}        </div>      </Spin>    );  }}export default Form.create()(Conf)